class Block {
    constructor(title, content) {
        this.title = title;
        this.content = content;
    }

    toHtml() {
        throw new Error("–ú–µ—Ç–æ–¥ toHtml –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ");
    }
}

class HeroBlock extends Block {
    toHtml() {
        return `
            <div class="hero">
                <img src="${this.content.image}" alt="${this.title}">
                <div class="hero-content">
                    <h1>${this.title}</h1>
                    <p>${this.content.text}</p>
                </div>
            </div>
        `;
    }
}

class InfoBlock extends Block {
    toHtml() {
        const listItems = this.content.map(item => `<li>${item}</li>`).join("");
        return `
            <div class="block">
                <h2>${this.title}</h2>
                <ul>${listItems}</ul>
            </div>
        `;
    }
}

class AchievementsBlock extends Block {
    toHtml() {
        const listItems = this.content.map(item => `<li>${item}</li>`).join("");
        return `
            <div class="block">
                <h2>${this.title}</h2>
                <ul>${listItems}</ul>
            </div>
        `;
    }
}

class HobbiesBlock extends Block {
    toHtml() {
        const listItems = this.content.map(item => `<li>${item}</li>`).join("");
        return `
            <div class="block">
                <h2>${this.title}</h2>
                <ul>${listItems}</ul>
            </div>
        `;
    }
}

class PersonalLifeBlock extends Block {
    toHtml() {
        const listItems = this.content.map(item => `<li>${item}</li>`).join("");
        return `
            <div class="block">
                <h2>${this.title}</h2>
                <ul>${listItems}</ul>
            </div>
        `;
    }
}

class ContactBlock extends Block {
    toHtml() {
        const contactsHtml = this.content.map(contact => `<a href="${contact.link}">${contact.text}</a>`).join("<br>");
        return `
            <div class="block">
                <h2>${this.title}</h2>
                <p>${contactsHtml}</p>
            </div>
        `;
    }
}

class ButtonBlock extends Block {
    toHtml() {
        return `
            <div class="button-container">
                <a href="${this.content.link}" class="button">${this.content.text}</a>
            </div>
        `;
    }
}

let isEditMode = false;

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function toggleEditMode() {
    isEditMode = !isEditMode;
    const button = document.getElementById("toggle-edit-mode");
    if (isEditMode) {
        button.textContent = "–†–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞";
        enableEditMode();
    } else {
        button.textContent = "–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è";
        disableEditMode();
    }
}

// –í–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function enableEditMode() {
    const blocks = document.querySelectorAll(".block, .hero");
    blocks.forEach(block => {
        block.setAttribute("contenteditable", true); 
        block.style.border = "2px dashed #ccc"; 
    });

    document.getElementById("add-block").style.display = "inline-block";
    document.querySelectorAll(".delete-block").forEach(button => {
        button.style.display = "inline-block";
    });
}

// –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function disableEditMode() {
    const blocks = document.querySelectorAll(".block, .hero");
    blocks.forEach(block => {
        block.setAttribute("contenteditable", false);
        block.style.border = "none";
    });

    // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–∫–æ–≤
    document.getElementById("add-block").style.display = "none";
    document.querySelectorAll(".delete-block").forEach(button => {
        button.style.display = "none";
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞
function addNewBlock() {
    const newBlock = new InfoBlock("–ù–æ–≤—ã–π –±–ª–æ–∫", ["–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç"]);
    const app = document.getElementById("app");
    app.appendChild(createBlockElement(newBlock));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –±–ª–æ–∫–∞
function createBlockElement(block) {
    const div = document.createElement("div");
    div.innerHTML = block.toHtml();
    if (isEditMode) {
        div.setAttribute("contenteditable", true);
        div.style.border = "2px dashed #ccc";
    }
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è
    const deleteButton = document.createElement("button");
    deleteButton.textContent = "–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫";
    deleteButton.className = "delete-block";
    deleteButton.style.display = isEditMode ? "inline-block" : "none";
    deleteButton.addEventListener("click", () => div.remove());
    div.appendChild(deleteButton);
    return div;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function buildPage(blocks) {
    const app = document.getElementById("app");
    if (!app) {
        console.error("–≠–ª–µ–º–µ–Ω—Ç —Å id='app' –Ω–µ –Ω–∞–π–¥–µ–Ω!");
        return;
    }
    app.innerHTML = ""; 
    blocks.forEach(block => {
        app.appendChild(createBlockElement(block));
    });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    document.getElementById("toggle-edit-mode").addEventListener("click", toggleEditMode);

    document.getElementById("add-block").addEventListener("click", addNewBlock);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫–æ–≤
const hero = new HeroBlock("–ê—Ä—Ç–µ–º–∏–π –õ–µ–±–µ–¥–µ–≤", {
    image: "image/artemy.jpg",
    text: "–î–∏–∑–∞–π–Ω–µ—Ä, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å ¬´–°—Ç—É–¥–∏–∏ –ê—Ä—Ç–µ–º–∏—è –õ–µ–±–µ–¥–µ–≤–∞¬ª."
});
const info = new InfoBlock("–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", [
    "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è",
    "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: 13 —Ñ–µ–≤—Ä–∞–ª—è 1975 –≥–æ–¥–∞"
]);
const achievements = new AchievementsBlock("–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", [
    "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—å —Å—Ç—É–¥–∏–∏ –ê—Ä—Ç–µ–º–∏—è –õ–µ–±–µ–¥–µ–≤–∞",
    "M–µ–¥–∞–ª—å –æ—Ä–¥–µ–Ω–∞ ¬´–ó–∞ –∑–∞—Å–ª—É–≥–∏ –ø–µ—Ä–µ–¥ –û—Ç–µ—á–µ—Å—Ç–≤–æ–º¬ª II —Å—Ç–µ–ø–µ–Ω–∏",
    "–°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ ¬´–Ø–Ω–¥–µ–∫—Å–∞¬ª",
    "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–∞–π–Ω–∞ –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –º–µ—Ç—Ä–æ–ø–æ–ª–∏—Ç–µ–Ω–∞",
    "–î–∏—Ä–µ–∫—Ç–æ—Ä –ø–æ –¥–∏–∑–∞–π–Ω—É —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏ ¬´–í–ö–æ–Ω—Ç–∞–∫—Ç–µ¬ª",
]);
const hobbies = new HobbiesBlock("–ó–∞–Ω—è—Ç–∏—è –≤–Ω–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä—ã", [
    "–£–≤–ª–µ—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π",
    "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–∏—Ö –∫–Ω–∏–≥",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"
]);
const personalLife = new PersonalLifeBlock("–õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å", [
    "–ñ–µ–Ω–∞—Ç, –¥–µ—Å—è—Ç—å –¥–µ—Ç–µ–π",
    "–ê–∫—Ç–∏–≤–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤"
]);
const contact = new ContactBlock("–ö–æ–Ω—Ç–∞–∫—Ç—ã", [
    { text: "Email: info@artlebedev.ru", link: "mailto:info@artlebedev.ru" },
]);
const button = new ButtonBlock("–ö–Ω–æ–ø–∫–∞", { text: "–£–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –¢–µ–º–µ", link: "https://www.artlebedev.ru" });

function renderPage(blocks) {
    document.body.innerHTML = "";

    const header = document.createElement("header");
    header.innerHTML = `
        <h1>–°–∞–π—Ç –æ–± –ê—Ä—Ç–µ–º–∏–∏ –õ–µ–±–µ–¥–µ–≤–µ</h1>
        <button id="toggle-edit-mode">–†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</button>
        <button id="add-block" style="display: none;">–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫</button>
    `;
    document.body.appendChild(header);

    const app = document.createElement("div");
    app.id = "app";
    document.body.appendChild(app);

    buildPage(blocks);

    setupEventListeners();
}

renderPage([hero, info, achievements, hobbies, personalLife, contact, button]);
// Add these methods to your existing code
async function fetchRandomUser() {
    showLoading(true);
    try {
        const getResponse = await fetch('https://reqres.in/api/users?page=1');
        if (!getResponse.ok) throw new Error(`GET error! Status: ${getResponse.status}`);
        const data = await getResponse.json();
        const user = data.data[Math.floor(Math.random() * data.data.length)];
        const userText = `üë§ ${user.first_name} ${user.last_name} (${user.email})`;
        addInfoBlock("Random User", [userText]);
    } catch (error) {
        addInfoBlock("Error", [`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`]);
    } finally {
        showLoading(false);
    }
}

async function fetchJoke() {
    showLoading(true);
    try {
        const getResponse = await fetch('https://official-joke-api.appspot.com/random_joke');
        if (!getResponse.ok) throw new Error(`GET error! Status: ${getResponse.status}`);
        const joke = await getResponse.json();
        addInfoBlock("Joke", [`üòÇ ${joke.setup} - ${joke.punchline}`]);
    } catch (error) {
        addInfoBlock("Error", [`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—É—Ç–∫–∏: ${error.message}`]);
    } finally {
        showLoading(false);
    }
}

async function fetchQuote() {
    showLoading(true);
    try {
        const getResponse = await fetch('https://dummyjson.com/quotes/random');
        if (!getResponse.ok) throw new Error(`GET error! Status: ${getResponse.status}`);
        const quote = await getResponse.json();
        const quoteText = `üí¨ "${quote.quote}" - ${quote.author}`;
        addInfoBlock("Quote", [quoteText]);
    } catch (error) {
        addInfoBlock("Error", [`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã: ${error.message}`]);
    } finally {
        showLoading(false);
    }
}

// Helper function to add info blocks
function addInfoBlock(title, content) {
    const newBlock = new InfoBlock(title, content);
    const app = document.getElementById("app");
    app.appendChild(createBlockElement(newBlock));
    
    // If you're maintaining a blocks array somewhere
    if (typeof blocks !== 'undefined') {
        blocks.push(newBlock);
        saveToLocalStorage();
    }
}

// Modify your setupEventListeners function to include API buttons
function setupEventListeners() {
    document.getElementById("toggle-edit-mode").addEventListener("click", toggleEditMode);
    document.getElementById("add-block").addEventListener("click", addNewBlock);
    
    // Add API buttons to your header
    const header = document.querySelector("header");
    header.innerHTML += `
        <button class="api-button" data-api="random-user">Get Random User</button>
        <button class="api-button" data-api="joke">Get Joke</button>
        <button class="api-button" data-api="quote">Get Quote</button>
    `;
    
    // Add event listeners for API buttons
    document.querySelectorAll('.api-button').forEach(item => {
        item.addEventListener('click', () => {
            const apiType = item.dataset.api;
            if (apiType === 'random-user') fetchRandomUser();
            if (apiType === 'joke') fetchJoke();
            if (apiType === 'quote') fetchQuote();
        });
    });
}

// Add loading indicator function
function showLoading(show) {
    let loading = document.getElementById("loading");
    if (!loading) {
        loading = document.createElement("div");
        loading.id = "loading";
        loading.style.display = "none";
        loading.style.position = "fixed";
        loading.style.top = "0";
        loading.style.left = "0";
        loading.style.width = "100%";
        loading.style.height = "100%";
        loading.style.backgroundColor = "rgba(0,0,0,0.5)";
        loading.style.zIndex = "1000";
        loading.innerHTML = `<div style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); color: white;">Loading...</div>`;
        document.body.appendChild(loading);
    }
    loading.style.display = show ? "block" : "none";
}